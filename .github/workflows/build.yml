name: CI-CD Pipeline

on:
  push:
    branches: ["main", "test_pipeline"]
  pull_request:
    branches: ["main"]

jobs:
  # continuous-integration:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code from Github
  #       uses: actions/checkout@v3

  #     - name: Install node v16
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: 16

  #     - name: Install dependencies of GDHI-app
  #       run: yarn install

  #     - name: Run test cases for the GDHI-app
  #       run: yarn test:coverage

  upload-artifact-to-s3:
    runs-on: ubuntu-latest
    # needs: [continuous-integration]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/test_pipeline'
    environment: QA
    env:
      VITE_IS_GOOGLE_ANALYTICS_ENABLED: ${{ vars.VITE_IS_GOOGLE_ANALYTICS_ENABLED }}
      VITE_GOOGLE_ANALYTICS_ID: ${{ vars.VITE_GOOGLE_ANALYTICS_ID }}
    steps:
      - name: Checkout code from Github
        uses: actions/checkout@v3

      - name: Install node v16
        uses: actions/setup-node@v3
        with:
          node-version: 16

      # - name: Install dependencies of GDHI-app
      #   run: yarn install

      # - name: Build GDHI-app
      #   run: yarn build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Fetch Application Version from AWS parameter store
        run: APPLICATION_VERSION=`aws ssm get-parameters --name "qaBuildNumberForApp" --query Parameters[0].Value`;APPLICATION_VERSION=`echo $APPLICATION_VERSION | tr -d '"'`;

      - name: Print build number
        run: echo `aws ssm get-parameters --name "qaBuildNumberForApp" --query Parameters[0].Value`

      - name: echo
        run: echo `$APPLICATION_VERSION | tr -d '"'`

      # - name: Upload Artifact to s3
      #   run: aws s3 cp dist s3://${{ secrets.AWS_S3_BUCKET_NAME }}/${{ secrets.AWS_S3_FOLDER }}/${{secrets.APPLICATION_NAME}}$APPLICATION_VERSION --recursive

      - name: Update Application Version Number
        run: APPLICATION_VERSION=`expr $APPLICATION_VERSION + 1`; aws ssm put-parameter --name "qaBuildNumberForApp" --value $APPLICATION_VERSION --overwrite;

      - name: Print build number
        run: echo `expr $APPLICATION_VERSION + 1`

  deploy-to-qa:
    runs-on: ubuntu-latest
    needs: [upload-artifact-to-s3]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create CodeDeploy Deployment for QA
        id: deploy
        run: |
          aws deploy create-deployment \
            --application-name ${{ secrets.AWS_APPLICATION_NAME }} \
            --deployment-group-name ${{ secrets.AWS_QA_DEPLOYMENT_GROUP }} \
            --deployment-config-name CodeDeployDefault.OneAtATime \
            --github-location repository=${{ github.repository }},commitId=${{ github.sha }} \
            --ignore-application-stop-failures

  run-automation-testsuite:
    runs-on: ubuntu-latest
    needs: [deploy-to-qa]
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Check out code from gdhi-automation-version2
        uses: actions/checkout@v3
        with:
          repository: healthenabled/gdhi-automation-version2
          ref: "master"
          path: gdhi-automation-version2

      - name: grant permissions
        working-directory: gdhi-automation-version2
        run: chmod +x gradlew

      - name: Install curl
        run: sudo apt install curl

      - name: Install Gauge
        run: curl -SsL https://downloads.gauge.org/stable | sh

      - name: Run test suite for frontend
        working-directory: gdhi-automation-version2
        run: CHROME_HEADLESS=false ./gradlew clean gauge -Ptags='ui'
        continue-on-error: true
